In [1]:
def pound2kg(weight):
    weight_kg = weight * 0.453592
    return weight_kg
In [2]:
## Explanation of function pound2kg
#1. def pound2kg(pound weight):
#2. weight_kg is pound weight * 0.453592
#3. return weight_kg
In [3]:
def inch2cm(height):
    height_cm = (height * 2.54)
    return height_cm
In [4]:
## Explanation of function inch2cm
#1. def inch2cm(inch height):
#2. height_cm is inch height * 2.54
#3. return height_cm
In [5]:
def ft2inch(height_feet):
    height_inch = (height_feet * 12)
    return height_inch
In [6]:
## Explanation of function ft2inch
#1. def ft2inch(feet height)
#2. height_inch = (feet height * 12)
#3. return height_inch
In [7]:
def bmi(height_cm, weight_kg):
    user_bmi = weight_kg / ((height_cm * 0.01) * (height_cm * 0.01))
    return user_bmi
In [8]:
## Explanation of function bmi
#1. def bmi(centimeter height, kilogram weight)
#2. user_bmi is weight_kg / (height_cm * 0.01) * (height_cm * 0.01)
#3. return user_bmi
In [9]:
def height_clear(text):
    if text.find("cm") >= 0:
        text = text.replace("cm", "").replace(" ","")
        height = float(text)
    elif text.find("CM") >= 0:
        text = text.replace("CM", "").replace(" ","")
        height = float(text)
    elif text.find("Cm") >= 0:
        text = text.replace("CM", "").replace(" ","")
        height = float(text)
    else:
        text =  text.replace(" ", "")
        height = (text)
        
    return height
In [10]:
## Explanation of function height_clear
#1. def height_clear(user_input)
#2. Make an if statement to find " ", cm","CM" or "Cm" if user entered like that
#3. Then change " ", cm", "CM" or "Cm" to ""
#4. return height which is fixed out
In [11]:
def weight_clear(text):
    if text.find("kg") >= 0:
        text = text.replace("kg", "").replace(" ","")
        weight = float(text)
    elif text.find("KG") >= 0:
        text = text.replace("KG", "").replace(" ","")
        weight = float(text)
    elif text.find("Kg") >= 0:
        text = text.replace("Kg", "").replace(" ","")
        weight = float(text)
    elif text.find("Pound") >= 0:
        text = text.replace("Pound", "").replace(" ","")
        weight = float(text)
    elif text.find("POUND") >= 0:
        text = text.replace("POUND", "").replace(" ","")
        weight = float(text)
    elif text.find("pound") >= 0:
        text = text.replace("pound", "").replace(" ","")
        weight = float(text)
    else:
        text =  text.replace(" ", "")
        weight = float(text)
        
    return weight
In [12]:
## Explanation of function weight_clear
#1. def weight_clear(user_input)
#2. Make an if statement to find " ", "kg","KG","Kg", "Pound", "POUND", or "pound" if user entered like that
#3. Then change " ", "kg","KG","Kg", "Pound", "POUND", or "pound"to ""
#4. return weight which is fixed out
In [13]:
import plotly
import plotly.plotly as py 
import plotly.graph_objs as go  
import cufflinks as cf
import pandas as pd
import warnings

warnings.filterwarnings('ignore') 

try:
    print("This is BMI calculator")
    unit_height = input("Height is in which unit [Cm/Feet]: ").upper().replace(' ','')
    height = height_clear(input('Please Enter your height: [For feet&inch please enter like (#"#)]'))
    if unit_height == 'CM':
        height_cm = float(height)
    elif unit_height == 'FEET':
        height_feet, height_inch = height.split('"')
        height_feet = float(height_feet)
        height_inch = float(height_inch)
        height_inch = height_inch + ft2inch(height_feet)
        height_cm = inch2cm(height_inch)
    else:
        print("I cannot convert that")
    unit_weight = input("Weight is in which unit [Kg/Pound]: ").upper().replace(' ','')
    weight = weight_clear((input("Please Enter your weight: ")))
    if unit_weight == 'KG':
        weight_kg = weight
    elif unit_weight == 'POUND':
        weight_kg = pound2kg(weight)
    else:
        print("I cannot convert that")

    user_bmi = bmi(height_cm, weight_kg)
    print("Here are meal recommendations~")
    if user_bmi <= 18.5:
        print("Underweight")
        print("You are underweight. these meal plans are good for you to gain more weight") 
        website = 'http://listmoz.com/view/fgcpl3cSvYQ6Tdt3J1'
        data1 = pd.read_html(website)
        meal_recommend_underweight = data1[0]
        meal_recommend_underweight.columns = ['','Meal Recommendations']
        print(meal_recommend_underweight[['Meal Recommendations']])

    elif user_bmi <=24.9:
        print("Normal weight")
        website = 'http://listmoz.com/view/tfnRCDgfDSP44KbPk'
        data1 = pd.read_html(website)
        meal_recommend_normalweight = data1[0]
        meal_recommend_normalweight.columns = ['','Meal Recommendations']
        print(meal_recommend_normalweight[['Meal Recommendations']])
        
    elif user_bmi <= 29.9:
        print("Overweight")
        website = 'http://listmoz.com/view/Xqcv8Ffvyd5nLTglx'
        data1 = pd.read_html(website)
        meal_recommend_overweight = data1[0]
        meal_recommend_overweight.columns = ['','Meal Recommendations']
        print(meal_recommend_overweight[['Meal Recommendations']])
        
    else: 
        print("Obesity")
        website = 'http://listmoz.com/view/Cmt5PdSNpqP2bQ3x'
        data1 = pd.read_html(website)
        meal_recommend_obese = data1[0]
        meal_recommend_obese.columns = ['','Meal Recommendations']
        print(meal_recommend_obese[['Meal Recommendations']])

except ValueError:
    print("Invalid Input. Program Quitting.")
except TypeError:
    print("Cannot convert input. Program Quitting.")
    
plotly.tools.set_credentials_file(username='zengfa1997', api_key='MYEbcdJQPBHKXktIO3A7')

body = { 'subjects' : ['under weight', 'average', 'over weight','your bmi'],
    	'level' : [18.5, 24.9, 29.9, user_bmi]
    	}

body_df = pd.DataFrame(body)
bmi_chart = body_df.iplot(kind='bar', x='subjects', y='level', title='The Super Accurate BMI Chart', xTitle='BMI Types', yTitle='BMI Level')
print("")
print(" An normal weighted person's BMI is 24.9")
print(" A under weighted person's BMI is 18.5")
print(" A over weighted person's BMI is 29.9")
print(" Your BMI level is %f" % user_bmi)
bmi_chart
This is BMI calculator
Height is in which unit [Cm/Feet]: cm
Please Enter your height: [For feet&inch please enter like (#"#)]180cm
Weight is in which unit [Kg/Pound]: kg
Please Enter your weight: 70
Here are meal recommendations~
Normal weight
                                Meal Recommendations
0  Meal One: Egg Toast+low fat milk(300 calories)...
1  Meal Two: Ravioli+Vegetable soup (600 calories...
2  Meal Three: Salmon & Vegetable (700 calories) ...

 An normal weighted person's BMI is 24.9
 A under weighted person's BMI is 18.5
 A over weighted person's BMI is 29.9
 Your BMI level is 21.604938
Out[13]:
In [ ]:
## Program Explanation

##Inputs:
#1. User's Height unit (CM, Feet)
#2. User's height (For example: 180 or 180cm)
#3. User's Weight unit (Kg, Pound)
#4. User's Weight (For example: 70 or 70kg)

##Outputs:
#1. One of weight type from underweight, Normal weight, Overweight and Obesity based on BMI
#2. If user type different value or type, then print ("Invalid input") or print ("Cannot convert input")

## Algorithm (Steps in Program):
#1. Import pandas
#2. Import ignore warnings
#3. Import plotly
#4. Import plotly.plotly as py	 
#5. Import plotly.graph_objs as go  
#6. Import cufflinks as cf
#7. Import pandas as pd
#8. print("This is BMI Calculator)
#9. Input user's height unit cm and feet, For feet(number of feet" number of inch)
#10. Make upper letter user's input and replace " " to ""
#11. Make an function height_clear to prevent input error when user try to input cm or space or CM to height input
#12. Input user's height with height clear function
#13. Make a if and elif statement to figure out user's unit
#14. If unit is "CM" then, height is height_cm which is based on centimeters
#15. Elif unit is "Feet" then split " for (# of feet"# of inch), # of feet is height_feet and # of inch is height_inch
#16. Make a float type for both height_feet and height_inch
#17. Make a function ft2inch which change feet to inch
#18. Change height_feet to height_inch using by function ft2inch and add with height_inch, so get total height_inch
#19. Make an function inch2cm and change total height_inch to height_cm
#20. Input user's weight unit (KG or Pound)
#21. Make upper letter user's input and replace " " to ""
#22. Input user's weight
#23. Make an function weight_clear to prevent input error when user try to input kg or space or pound to weight input
#24. Input user's weight with weight_clear function
#25. If unit is "KG", then weight is weight_kg which is based on kilogram
#26. Make an function pound2kg to change pound to kilogram
#27. Elif unit is "Pound" then change pound to kilogram using by function pound2kg
#28. else print("I can not convert that")
#29. Make an function bmi which returns user's bmi based on height_cm and weight_kg
#30. Make an if statement to distribute user's weight type
#31. if bmi <= 18.5, then print ("Underweight")
#32. elif bmi <= 24.9, then print ("Normal weight")
#33. elif bmi <= 29.9, then print ("Overweight")
#34. else which is over 30, then print ("Obesity")
#35. Scrap data from the website and save it to data1
#36. Make a list of data type to data1[0] and change the name of data1[0] to meal_preference_weight type
#37. Make a column for data type which is meal preferences
#38. Print out the weigth type with meal preferances 
#39. Make a Try and Except statement to prevent error, for this program we prevent TypeError and ValueError.
#40. Convert data of average weighted/ under weighted/ over weighted person’s BMI on a bar graph
#41. Recall back to the user’s bmi level and plot it onto the graph
#42. Program shows everything depends on user's bmi and done
In [ ]:
#Who did what
#After the project is approved, we started doing the actual project. 
#Our program has an objective of  checking health body weight for people and calculate either that person is Overweight, 
#Underweight, or average. In order to do that, we had to come up with a BMI calculator. 
#Woosung made a program in which any person can input his or her weight and height, in kg/lbs and cm/inch. 
#Woosung created a function that can calculate bmi, convert inch to cm, lbs to kg, and output the result for the person’s bmi.  
#Also Woosung made a poster for demo-day.
#Yirui found websites that contain information about what kind of food is good to the certain group of people according to their bmi. 
#He grabbed the information we need from the website, and list of data them in our program. 
#Zengfa did the program visualization. He created a chart where the user can see what the bmi distribution should be among people, 
#and will be able to see their own standing. 
#And together, we examined the code one last time to prevent possible errors in our program.
